<?xml version="1.0"?>
<!--
 (c) 2021 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 -->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://community.rti.com/schema/7.0.0/rti_routing_service.xsd">
    <!-- Make sure this path is correctly set into your system, otherwise it
       wouldn't affect the execution, but autocompletion wouldn't work -->

    <!-- Adapter entry points are defined here -->
    <adapter_library name="adapters">
        <adapter_plugin name="file">
            <dll>FileAdapterC</dll>
            <create_function>RTI_RoutingServiceFileAdapterPlugin_create</create_function>
        </adapter_plugin>
    </adapter_library>

    <!-- ****************************************************************** -->

    <types>
        <include file="../ShapeType.xml"/>
    </types>

    <!-- ****************************************************************** -->

    <routing_service name="file_to_file">
        <annotation>
            <documentation>
                This configuration takes a file as plugin property, reads its contents\
                and place them in another file using the C adapter.
            </documentation>
        </annotation>

        <domain_route>
            <connection name="1" plugin_name="adapters::file">
                <!-- Types must be registered in connections AND inputs/outputs using them-->
                <registered_type name="ShapeType" type_name="ShapeType"/>
            </connection>

            <session name="ff">
                <route name="filefile">
                    <input connection="1">
                        <creation_mode>IMMEDIATE</creation_mode>
                        <registered_type_name>ShapeType</registered_type_name>
                        <property>
                            <value>
                                <element>
                                    <name>example.adapter.input_file</name>
                                    <value>Input_$(SHAPE_TOPIC).csv</value>
                                </element>
                                <!-- How often we read samples from the file (ms) -->
                                <element>
                                    <name>example.adapter.sample_period_millisec</name>
                                    <value>1000</value>
                                </element>
                            </value>
                        </property>
                    </input>

                    <output connection="1">
                        <registered_type_name>ShapeType</registered_type_name>
                        <creation_mode>ON_ROUTE_MATCH</creation_mode>
                        <property>
                            <value>
                                <element>
                                    <name>example.adapter.output_file</name>
                                    <value>Output_$(SHAPE_TOPIC).csv</value>
                                </element>
                                <!-- The write mode can be:
                                        - overwrite (write in the file deleting previous content)
                                        - append (write at then end of the file)
                                        - keep (fail if the file already exists and don't modify it)
                                -->
                                <element>
                                    <name>example.adapter.write_mode</name>
                                    <value>overwrite</value>
                                </element>
                                <!-- Whether to flush the file after every sample is written. -->
                                <element>
                                    <name>example.adapter.flush</name>
                                    <value>1</value>
                                </element>
                            </value>
                        </property>
                    </output>

                </route>
            </session>
        </domain_route>
    </routing_service>

    <routing_service name="file_to_dds">

        <annotation>
            <documentation>
                Read shapes from a file and publish them into DDS
            </documentation>
        </annotation>

        <domain_route name="filedds">

            <connection name="in" plugin_name="adapters::file">
                <registered_type name="ShapeType" type_name="ShapeType"/>
            </connection>

            <participant name="out">
                <domain_id>0</domain_id>
                <!-- Registered types must be defined in both the connection/participant
                    and inputs/outputs where it is used-->
                <registered_type name="ShapeType" type_name="ShapeType"/>
            </participant>

            <session name="filedds">
                <!-- This route gets ShapeType samples from the file Input_$(SHAPE_TOPIC).csv
		            and publishes them in DDS -->
                <route name="shapes_file">
                    <input connection="in">
                        <!-- We only start reading when the output
			                is ready to write -->
                        <creation_mode>ON_ROUTE_MATCH</creation_mode>
                        <stream_name>$(SHAPE_TOPIC)</stream_name>
                        <registered_type_name>ShapeType</registered_type_name>
                        <property>
                            <value>
                                <!-- The file from which to read -->
                                <element>
                                    <name>example.adapter.input_file</name>
                                    <value>Input_$(SHAPE_TOPIC).csv</value>
                                </element>
                                <!-- How often we read samples from the file (ms) -->
                                <element>
                                    <name>example.adapter.sample_period_millisec</name>
                                    <value>500</value>
                                </element>
                                <!-- Whether to start over from the beginning
                                of the file when the EOF is reached -->
                                <element>
                                    <name>example.adapter.loop</name>
                                    <value>0</value>
                                </element>
                            </value>
                        </property>
                    </input>

                    <dds_output participant="out">
                        <!-- We only start writing when we have a DDS data reader
			                expecting our topic -->
                        <creation_mode>ON_DOMAIN_MATCH</creation_mode>
                        <topic_name>$(SHAPE_TOPIC)</topic_name>
                        <registered_type_name>ShapeType</registered_type_name>
                    </dds_output>

                </route>
            </session>
        </domain_route>
    </routing_service>

    <routing_service name="dds_to_file">

        <annotation>
            <documentation>
                Subscribes to shapes using dds and writes the samples in a csv
            </documentation>
        </annotation>

        <domain_route name="ddsfile">

            <connection name="fileadapter" plugin_name="adapters::file">
                <registered_type name="ShapeType" type_name="ShapeType"/>
            </connection>

            <participant name="part1">
                <domain_id>0</domain_id>
            </participant>

            <session name="session1">
                <!-- This route gets ShapeType samples from DDS
		            and writes them in the file Output_$(SHAPE_TOPIC).csv -->
                <route name="shapes_file">

                    <dds_input participant="part1">
                        <!-- We only start writing when we have a DDS data reader
			                expecting our topic -->
                        <creation_mode>ON_DOMAIN_MATCH</creation_mode>
                        <topic_name>$(SHAPE_TOPIC)</topic_name>
                        <registered_type_name>ShapeType</registered_type_name>
                    </dds_input>

                    <output connection="fileadapter">
                        <!-- We only start reading when the output
                            is ready to write -->
                        <creation_mode>ON_ROUTE_MATCH</creation_mode>
                        <stream_name>$(SHAPE_TOPIC)</stream_name>
                        <registered_type_name>ShapeType</registered_type_name>
                        <property>
                            <value>
                                <!-- The output file.-->
                                <element>
                                    <name>example.adapter.output_file</name>
                                    <value>Output_$(SHAPE_TOPIC).csv</value>
                                </element>
                                <!-- The write mode can be:
                                - overwrite (write in the file deleting previous content)
                                - append (write at then end of the file)
                                - keep (fail if the file already exists and don't modify it) -->
                                <element>
                                    <name>example.adapter.write_mode</name>
                                    <value>overwrite</value>
                                </element>
                                <!-- Whether to flush the file after every sample
				                is written. -->
                                <element>
                                    <name>example.adapter.flush</name>
                                    <value>1</value>
                                </element>
                            </value>
                        </property>
                    </output>
                </route>
            </session>
        </domain_route>
    </routing_service>
</dds>